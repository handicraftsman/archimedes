Hy macros for Hypothesis framework
==================================

Archimedes is a set of Hy macros that are used to make writing tests with
Hypothesis easier. ``fact`` specified a test case, ``variants`` and
``sample`` specify rules for test data generation, ``background`` and
``with-background`` specify common data between tests.

Examples are good:
------------------

.. code-block:: hy

   (require archimedes)
   
   (import [hypothesis [given example]]
           [hypothesis.strategies [integers]]
           [math [pow]])

   (fact "true is always true"
         (assert true))

   (background some-numbers
         [a 3]
         [b 4]
         [c 5])

   (fact "Pythagorean theorem holds in this specific case"
         (with-background some-numbers [a b c]
           (assert (= (+ (pow a 2) (pow b 2)) (pow c 2)))))

   (fact "sum of two positive numbers is larger than either one of them"
         (variants :a (integers :min-size 1)
                   :b (integers :min-size 1))
         (assert (> (+ a b) a))
         (assert (> (+ a b) b)))

   (fact "example can clarify things"
         (variants :a (integers :min-size 0 :max-size 10)
                   :b (integers :min-size 0 :max-size 10))
         (sample :a 0 :b 0)
         (assert (<= 0 (+ a b) 20)))

Syntax:
-------

.. code-block::

   background: "(" "background" symbol <symbol-value>* ")"
   symbol-value: "[" symbol s-expression "]"
   fact: "(" "fact" string
             [<variants> | <variants-sample>]
             [<with-background>]
             s-expression* ")"
   variants: "(" "variants" <variant-spec>* ")"
   variants-sample: "(" "variants" <variant-spec>* ")"
                    "(" "sample" <sample-spec>* ")"
   variant-spec: keyword strategy
   sample-spec: keyword s-expression
   with-background: "(" "with-background" symbol "[" symbol* "]" 
                        s-expression* ")"

Details are needed sometimes:
-----------------------------

``(background name elements)`` defines setup function. Name is symbol. Name
of the test function will be ``"setup_" + name``. ``elements`` is one or more
two element lists with first element as symbol and second as value of it.
The setup function will return a dictionary with keywordified symbols as keys
and corresponding values as their values.

``(fact description code)`` specifies a test function. ``description`` is a
string describing what the test is about. The generated function will have a
name ``"test_" + description`` and no arguments. Docstring of the function
will be value of ``description``. ``code`` can be one or more forms of code,
they are inserted inside of the test function as is.

``(with-background name symbols code)`` generates a let binding with code to call
background specified by ``name``. ``symbols`` is list of symbols that should
be retrieved from dictionary returned by setup function and bound to local
context. ``code`` is one or more elements of code, used to test things.

``(variants keyword specification)`` is used to specify test data that should
be generated by Hypothesis. It accepts arbitrary, but even, amount of
parameters. First specifies keywordified symbol and second strategy used to
generate value. If this form is present, test function's parameter list is
modified to have named parameters specified by keywords and is also wrapped
in ``given`` decorator.

``(sample keyword value)`` specifies sample set of values. Keyword specifies
symbol and value holds the value bound to it. It should have same amount of
keywords as ``variants`` form and can't be used without ``variants`` form.

Note about test framework:
--------------------------

Archimedes is geared towards Nose, but it might work with other frameworks
that rely on naming conventions to discover tests to be executed.

License:
--------

Licensed under MIT license
